openapi: 3.0.3
info:
  version: 0.1.0
  title: showtime
  description: |
    The **showtime** API handles events from Twitch and provides features used during
    live streams. More broadly, it's the part of the Golden VCR backend that's
    responsible for interop with the Twitch API (as well as Twitch chat over IRC and
    Twitch EventSub notifications).

    Since we use Twitch user accounts as our first-class representation of user
    identity within the Golden VCR backend, showtime also handles authentication via the
    Twitch API.
externalDocs:
  description: 'github.com/golden-vcr/showtime'
  url: https://github.com/golden-vcr/showtime
servers:
  - url: https://goldenvcr.com/api/showtime
tags:
  - name: status
    description: |-
      General status endpoints
  - name: auth
    description: |-
      Endpoints for handling user authentication via Twitch, used by the Golden VCR webapp
  - name: events
    description: |-
      Webhooks called by Twitch EventSub subscriptions
    externalDocs:
      description: Twitch EventSub API
      url: https://dev.twitch.tv/docs/eventsub/
  - name: streams
    description: |-
      SSE endpoints that provide real-time information using during streams
paths:
  /:
    get:
      tags:
        - status
      summary: |-
        Returns basic status information about the Showtime API
      operationId: getStatus
      responses:
        '200':
          description: |-
            API status was successfully evaluated.
          content:
            application/json:
              examples:
                ready:
                  summary: The showtime API is fully ready
                  value:
                    isReady: true
                    message: >-
                      All required Twitch Event subscriptions are enabled, and chat
                      features are working. The Golden VCR server is fully operational!
                chatDegraded:
                  summary: Events will function, but chat features are degraded
                  value:
                    isReady: false
                    message: >-
                      Twitch Event subscriptions are fully operational, but chat
                      functionality is degraded. (Error: Failed to establish initial
                      connection to Twitch chat: something went wrong)
                eventsNotInitialized:
                  summary: Required event subscriptions are not active
                  value:
                    isReady: false
                    message: >-
                      One or more required Twitch event subscriptions do not yet exist.
                      The Golden VCR server may not be receiving all required data from
                      Twitch.
                twitchOutage:
                  summary: The Twitch API is unresponsive
                  value:
                    isReady: false
                    message: >-
                      Unable to retrieve subscription details from the Twitch API. This
                      may be due to a disruption in service from Twitch itself, or there
                      may be a problem with the Golden VCR server. (Error: something
                      went wrong)
  /auth/login:
    post:
      tags:
        - auth
      summary: |-
        Exchanges a Twitch authorization code for a user access token
      operationId: postAuthLogin
      parameters:
        - in: query
          name: code
          required: true
          schema:
            type: string
        - in: query
          name: redirect_uri
          required: true
          schema:
            type: string
      responses:
        '200':
          description: |-
            Login was successful: we have authenticated the user via Twitch and obtained
            a user access token with the required scopes. The app may switch to a
            logged-in state and begin authorizing API requests with the provided access
            token.
          content:
            application/json:
              examples:
                loggedIn:
                  $ref: '#/components/examples/authStateLoggedIn'
        '400':
          description: |-
            Request was invalid due to missing `code` query parameter (should be set to
            an authorization code received from Twitch via the OAuth authorization code
            grant flow) or `redirect_uri` parameter.
        '401':
          description: |-
            Login failed: the user should remain logged out, and the provided error may
            be displayed to the user for context.
          content:
            application/json:
              examples:
                loggedOutWithError:
                  $ref: '#/components/examples/authStateLoggedOutWithError'
  /auth/refresh:
    post:
      tags:
        - auth
      summary: |-
        Uses a Twitch refresh token to obtain a new user access token
      operationId: postAuthRefresh
      responses:
        '200':
          description: |-
            Refresh was successful: the user remains authenticated via Twitch, and we
            have obtained a new access token which the app should begin using to
            authorize API requests.
          content:
            application/json:
              examples:
                loggedIn:
                  $ref: '#/components/examples/authStateLoggedIn'
        '400':
          description: |-
            Request was invalid due to missing `Authorization` header (should contain a
            Twitch refresh token).
        '401':
          description: |-
            Refresh failed: the app should revert to a logged-out state, and all stored
            user information should be purged.
          content:
            application/json:
              examples:
                loggedOutWithError:
                  $ref: '#/components/examples/authStateLoggedOutWithError'
      security:
        - twitchRefreshToken: []
  /auth/logout:
    post:
      tags:
        - auth
      summary: |-
        Revokes a Twitch user access token
      operationId: postAuthLogout
      responses:
        '200':
          description: |-
            The provided user access token was successfully revoked: the app should
            clear stored credentials and revert to a logged-out state.
          content:
            application/json:
              examples:
                loggedOut:
                  $ref: '#/components/examples/authStateLoggedOut'
        '400':
          description: |-
            Request was invalid due to missing `Authorization` header (should contain a
            Twitch user access token).
        '401':
          description: |-
            The provided token could not be validated. Regardless, the app should clear
            stored credentials and revert to a logged-out state.
          content:
            application/json:
              examples:
                loggedOutWithError:
                  $ref: '#/components/examples/authStateLoggedOutWithError'
      security:
        - twitchUserAccessToken: []
  /callback:
    post:
      tags:
        - events
      summary: |-
        Called by Twitch to initialize an EventSub subscription or notify us of an event
        we're subscribed to
      operationId: postCallback
      requestBody:
        content:
          application/json:
            examples:
              onregister:
                summary: Initial challenge when subscription is first registered
                value:
                  subscription:
                    id: '00000000-0000-0000-0000-000000000000'
                    type: channel.follow
                    version: '2'
                    status: enabled
                    condition:
                      broadcaster_user_id: '953753877'
                      moderator_user_id: '953753877'
                    transport:
                      method: webhook
                      example: https://goldenvcr.com/api/showtime/callback
                    created_at: '2023-01-01T12:15:00.77777777Z'
                    cost: 0
                  challenge: '9zMXrpRAtLsfCqcUxcgH2bdtCNirhr9X'
              onevent:
                summary: Event notification for an active subscription
                value:
                  subscription:
                    id: '00000000-0000-0000-0000-000000000000'
                    type: channel.follow
                    version: '2'
                    status: enabled
                    condition:
                      broadcaster_user_id: '953753877'
                      moderator_user_id: '953753877'
                    transport:
                      method: webhook
                      example: https://goldenvcr.com/api/showtime/callback
                    created_at: '2023-01-01T12:15:00.77777777Z'
                    cost: 0
                  event:
                    user_id: '90790024'
                    user_login: wasabimilkshake
                    user_name: wasabimilkshake
                    broadcaster_user_id: '953753877'
                    broadcaster_user_login: goldenvcr
                    broadcaster_user_name: GoldenVCR
                    followed_at: '2023-09-27T19:23:05.84782554Z'
        required: true
      responses:
        '200':
          description: |-
            The event was accepted. For an initial challenge on register, the response
            body will contain the literal `challenge` value from the request payload;
            otherwise no content.
        '400':
          description: |-
            Signature verification failed: the server could not verify that the request
            was initiated by Twitch.
  /alerts:
    get:
      tags:
        - streams
      summary: |-
        Provides a client with real-time notifications of alerts (follow, raid, etc.)
      operationId: getAlerts
      responses:
        '200':
          description: |-
            The HTTP connection opened for this request will be kept open, and the
            server will write JSON-serialized `Alert` objects into the response body
            until the connection is closed. Example of responses on the wire:

            ```
            data: {"type":"follow","data":{"username":"wasabimilkshake"}}

            data: {"type":"raid","data":{"username":"wasabimilkshake","numViewers":15}}
            
            :

            ```
          content:
            text/event-stream:
              examples:
                follow:
                  summary: A new user has followed the channel
                  value:
                    type: follow
                    data:
                      username: wasabimilkshake
                raid:
                  summary: Another broadcaster is raiding the channel
                  value:
                    type: raid
                    data:
                      username: wasabimilkshake
                      numViewers: 15
  /chat:
    get:
      tags:
        - streams
      summary: |-
        Provides a client with real-time chat messages
      description: |
        Chat events carry a `type` value that indicates whether they're a message, a
        control event (such a deleting or clearing messages), etc.

        For message events, the message text uses a custom format to encode emotes:

        - Any occurrence of `$$` represents a literal dollar sign and should be rendered
          as `$`

        - Any occurrence of `$i` (where `i` is an integer) is a reference to an emote
          from the event's `emotes` array. If `emotes[i].url` is a valid URL, then the
          `$i` placeholder should be replaced and rendered as an image element with that
          URL as its source. If `emotes[i].url` is not valid, then a sentinel value
          indicating `emotes[i].name` should be rendered instead.

        In the example message event given below, the chat line should be rendered as:

        - <font color="#00FF7F"><b>wasabimilkshake:</b></font> hello, I have $5 and this is an emote: <img alt="wasabi22Denton" src="https://static-cdn.jtvnw.net/emoticons/v2/emotesv2_9d94d65bbef64763b7c09401156ea0bc/default/dark/1.0" />
      operationId: getChat
      responses:
        '200':
          description: |-
            The HTTP connection opened for this request will be kept open, and the
            server will write JSON-serialized `chat.Event` objects into the response
            body until the connection is closed.
          content:
            text/event-stream:
              examples:
                message:
                  summary: A user has sent a message in the chat
                  value:
                    type: message
                    message:
                      id: 4cbc3d2a-4606-43d0-a9f3-2788fe50d352
                      username: wasabimilkshake
                      color: '#00FF7F'
                      text: 'hello, I have $$5 and this is an emote: $0'
                      emotes:
                        - name: wasabi22Denton
                          url: https://static-cdn.jtvnw.net/emoticons/v2/emotesv2_9d94d65bbef64763b7c09401156ea0bc/default/dark/1.0
                deletion:
                  summary: One or more recent messages should be deleted
                  value:
                    type: deletion
                    deletion:
                      messageIds:
                        - 4cbc3d2a-4606-43d0-a9f3-2788fe50d352
                clear:
                  summary: The entire chat log should be cleared
                  value:
                    type: clear
components:
  examples:
    authStateLoggedIn:
      summary: User was successfully authenticated via Twitch
      value:
        loggedIn: true
        user:
          id: '90790024'
          login: wasabimilkshake
          displayName: wasabimilkshake
        tokens:
          accessToken: twitch-issued-user-access-token
          refreshToken: twitch-issued-refresh-token
          scopes:
            - 'user:read:follows'
            - 'user:read:subscriptions'
    authStateLoggedOut:
      summary: User is logged out
      value:
        loggedIn: false
    authStateLoggedOutWithError:
      summary: An error occurred during authentication
      value:
        loggedIn: false
        error: Something went wrong
  securitySchemes:
    twitchUserAccessToken:
      type: http
      scheme: bearer
    twitchRefreshToken:
      type: http
      scheme: bearer
