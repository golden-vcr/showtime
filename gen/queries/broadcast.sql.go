// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: broadcast.sql

package queries

import (
	"context"
)

const getMostRecentBroadcast = `-- name: GetMostRecentBroadcast :one
select
    broadcast.id,
    broadcast.started_at,
    broadcast.ended_at
from showtime.broadcast
order by broadcast.started_at desc
limit 1
`

func (q *Queries) GetMostRecentBroadcast(ctx context.Context) (ShowtimeBroadcast, error) {
	row := q.db.QueryRowContext(ctx, getMostRecentBroadcast)
	var i ShowtimeBroadcast
	err := row.Scan(&i.ID, &i.StartedAt, &i.EndedAt)
	return i, err
}

const recordBroadcastEnded = `-- name: RecordBroadcastEnded :exec
with most_recent_broadcast as (
    select broadcast.id from showtime.broadcast
    order by broadcast.started_at desc
    limit 1
)
update showtime.broadcast set ended_at = now()
where broadcast.id = (select id from most_recent_broadcast)
    and broadcast.ended_at is null
`

func (q *Queries) RecordBroadcastEnded(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, recordBroadcastEnded)
	return err
}

const recordBroadcastResumed = `-- name: RecordBroadcastResumed :exec
update showtime.broadcast set ended_at = null
where broadcast.id = $1
    and broadcast.ended_at is not null
`

func (q *Queries) RecordBroadcastResumed(ctx context.Context, broadcastID int32) error {
	_, err := q.db.ExecContext(ctx, recordBroadcastResumed, broadcastID)
	return err
}

const recordBroadcastStarted = `-- name: RecordBroadcastStarted :one
insert into showtime.broadcast (
    started_at
) values (
    now()
)
returning broadcast.id
`

func (q *Queries) RecordBroadcastStarted(ctx context.Context) (int32, error) {
	row := q.db.QueryRowContext(ctx, recordBroadcastStarted)
	var id int32
	err := row.Scan(&id)
	return id, err
}
